// Grant De La Campa
// Adder.v, 137 Verilog Programming Assignment #3
//
//
module TestMod;                     // the "main" thing
   parameter STDIN = 32'h8000_0000; // I/O address of keyboard input channel

   reg [7:0] str [1:3]; // typing in 2 chars at a time (decimal # and Enter key)
   reg [4:0] X, Y;      // 5-bit X, Y to sum
   wire [4:0] S;        // 5-bit Sum to see as result
   wire C5;             // like to know this as well from result of Adder

   BigAdder mainAdd(X, Y, S, C5); //instatiate mainAdder

   initial begin
      $display("Enter X: ");
      	str[1] = $fgetc(STDIN); //get 1st num
      	str[2] = $fgetc(STDIN);
      	str[3] = $fgetc(STDIN);
	X = (str[1] - 48) * 10 + (str[2] - 48);
      $display("Enter Y: ");
      	str[1] = $fgetc(STDIN);
	str[2] = $fgetc(STDIN); //get 2nd num
      	str[3] = $fgetc(STDIN); //handel enter key
	Y = (str[1] - 48) * 10 + (str[2] - 48);


      #1; // wait until Adder gets them processed
      $display("X = %d (%b) Y = %d (%b)	,X,X,Y,Y);
      $display("Result=%d (%b) C5 = %d"	,S,S,C5);
   end
endmodule

module BigAdder(X, Y, S, C5);
   input [4:0] X, Y;   // two 5-bit input items
   output [4:0] S;        // S should be similar
   output C5;  // another output for a different size

   wire [0:4]C;                // declare temporary wires

   assign C[0] = 0;		//initial Cin is 0
   FullAdderMod my_adder0(C[0], X[0], Y[0], C[1], S[0]); //add first bits carry C[1]
   FullAdderMod my_adder1(C[1], X[1], Y[1], C[2], S[1]); //add second bits carry C[2]
   FullAdderMod my_adder2(C[2], X[2], Y[2], C[3], S[2]); //add third bits carry C[3]
   FullAdderMod my_adder3(C[3], X[3], Y[3], C[4], S[3]); //add fourth bits carry C[4]
   FullAdderMod my_adder4(C[4], X[4], Y[4], C5, S[4]);   //add fifth bits carry C5 
endmodule

module FullAdderMod(Cin, X, Y, Cout, Sum); // single-bit adder module
   input Cin, X, Y;
   output Cout, Sum;

   ParityMod my_parity(X, Y, Cin, Sum);
   MajorityMod my_majority(X, Y, Cin, Cout);
endmodule

module MajorityMod(Cin, X, Y, Cout); // carry-bit generator module
   input Cin, X, Y;
   output Cout;

   wire [0:2] and_out;

   and(and_out[0], X, Y);
   and(and_out[1], X, Cin);
   and(and_out[2], Y, Cin);
   or(Cout, and_out[0], and_out[1], and_out[2]);
endmodule

module ParityMod(Cin, X, Y, Sum); // sum-bit generator module
   input Cin, X, Y;
   output Sum;

   wire xorXY;

   xor(xorXY, X, Y);
   xor(Sum, xorXY, Cin);
endmodule